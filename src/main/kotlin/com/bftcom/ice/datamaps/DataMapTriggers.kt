package com.bftcom.ice.datamaps


/***
 * Контекст триггера (события ЖЦ сущности)
 */
interface TriggerContext {

    /***
     * Все изменения по записи, собранные в виде датамапа.
     * (в карте присутствуют >>только<<< изменененные свойства).
     * (Json-поля будут собраны в виде интегрального нового состояния динамического датамапа)
     * Карту можно изменять (в том числе, любой уровень вложенности json-полей)
     */
    val delta: DataMap


    /***
     * Предыдущее состояние записи (точнее, то состояние, которое сейчас находится в БД).
     * Достается отдельным запросом (повнимательней).
     * DataMap в состоянии readonly  - менять  нельзя
     */
    fun old(): DataMap?

    /***
     * Новое состояние записи (здесь можно получиьт все свойства, в отличие от delta).
     * Если изменения произведены на сервере  - то new() - ничего не стоит.
     * Если изменения сделаны на клиенте - то new() = find().withRefs().withBlobs() U  deltas
     */
    fun new(): DataMap

    val isClientChange: Boolean


    var cancel:Boolean

}

/***
 * Интерфейс сервиса жизненного цикла сущностей заданного типа.
 *
 * Позволяет выполнять определенные действиях на событиях жизненого цикла сущности:
 * инсерте, апдейте, удалении
 *
 * Сервис должен быть зарегистрирован как спринговый бин.
 * При старте будет создан реестр подобных сервисов и использоваться на операции флаша изменений в БД
 */
interface DataMapTriggers {

    companion object {
        val allEntities = listOf("allEntities")
    }

    /***
     * Целевые типы сущностей для которых будет вызываться данный сервис.
     * !!Если надо подписаться на изменения во всех сущностях (например всякие журналы)
     * - необходимо вернуть ссылку на allEntities (см. выше)
     */
    val targetEntities: List<String>

    /***
     * Приоритет сервиса. Для каждой сущноссти может быть создано несколько реестров.
     * Приоритет задает порядок их вызова - от нижнего к верхнему
     */
    fun getPriority(): Int = 0

    /**
     * Вызывается перед операциями инсертов. В этот момент можно еще менять delta
     */
    fun beforeInsert(event: TriggerContext) {}


    /**
     * Вызывается перед операциями инсертов. В этот момент можно еще менять delta
     */
    fun beforeUpdate(event: TriggerContext) {}

    /**
    * Вызывается перед операциями удаления.
    */
    fun beforeDelete(event: TriggerContext) {}

    /***
     * Вызывается после операции апдейта.
     *  Измененение записи НЕ приведет к новым апдейтам
     */
    fun afterUpdate(event: TriggerContext) {}

    /***
     * Вызывается сразу после создания новой записи.
     * Можно увидеть созданный id
     * Измененение записи приведет к апдейтам.
     */
    fun afterInsert(event: TriggerContext) {}

    /**
     * Вызывается сразу после удаления записи.
     */
    fun afterDelete(event: TriggerContext) {}


}


